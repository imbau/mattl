import FluxTableColumn, { ColumnType } from './FluxTableColumn';
/**
 * A dictionary of serializers of particular types returned by a flux query.
 * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }
 */
export declare const typeSerializers: Record<ColumnType, (val: string) => any>;
/**
 * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.
 */
export default class FluxTableMetaData {
    /**
     * Table columns.
     */
    columns: Array<FluxTableColumn>;
    constructor(columns: FluxTableColumn[]);
    /**
     * Gets columns by name
     * @param label - column label
     * @returns table column
     * @throws IllegalArgumentError if column is not found
     **/
    column(label: string): FluxTableColumn;
    /**
     * Creates an object out of the supplied values with the help of columns .
     * @param values - a row with data for each column
     */
    toObject(values: string[]): {
        [key: string]: any;
    };
}
//# sourceMappingURL=FluxTableMetaData.d.ts.map