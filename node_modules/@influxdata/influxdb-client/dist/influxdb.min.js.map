{"version":3,"file":"influxdb.min.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/version.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * writeFailed is called to inform about write error\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix\\@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n})\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  dateTime: (x: string): any => (x === '' ? null : x),\n  duration: (x: string): any => (x === '' ? null : x),\n}\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\n/**\n * FluxTableColumnLike provides metadata of a flux table column.\n */\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object - source object\n   * @returns column instance\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue ?? ''\n    return retVal\n  }\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) return strings[0] // the simplest case\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          throw new Error(\n            `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n          )\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines values of a single measurement.\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfxluDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      let delay = this.currentDelay\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.6.0'\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options - query options to use\n   * @returns this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","message","_super","setPrototypeOf","_this","IllegalArgumentError","prototype","__extends","Error","statusMessage","body","retryAfter","HttpError","setRetryAfter","test","this","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","name","AbortError","reEscape","config","wrap","patterns","keys","join","replace","_re","RegExp","Escaper","val","lastIndex","chunkIndex","escapedVal","match","exec","matched","toEscape","escapeChar","toReplace","replaceChar","slice","index","undefined","length","escaperConfig","EscaperConfig","bindEsc","e","escape","bind","measurement",","," ","\n","\r","\t","quoted","\"","\\\\","tag","=","lastMillis","Date","now","stepsInMillis","nanos","millis_2","nanos_2","String","substr","micros","millis","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","columns","forEach","col","i","FluxTableMetaData","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","FLUX_VALUE","Symbol","fluxValue","FluxParameter","sanitizeString","value","toString","prepareRetVal","substring","c","charAt","sanitizeFloat","dot","val_2","_i","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","Array","isArray","map","symbolObservable","observable","measurementName","Point","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","defaultTags","convertTime","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","options","success","RetryStrategyImpl","failedAttempts","delay","delay_1","currentDelay","min","max","maxLines","retryLines","RetryBuffer","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","_a","clearTimeout","maxChunkRecords","flushFn","scheduleSend","WriteBuffer","record","flush","reset","Promise","resolve","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","useDefaultTags","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","WriteApiImpl","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","complete","add","records","point","points","writePoint","withRetryBuffer","finally","remaining","close","key","pureJsChunkCombiner","concat","second","Uint8Array","set","toUtf8String","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","copy","connectionOptions","defaultHeaders","User-Agent","token","FetchTransport","path","callbacks","observer","state","data","responseStarted","completeCommunicationObserver","useCancellable","signal","controller_1","AbortController","signal_1","cancel","abort","isCancelled","aborted","fetch","response","headers_1","previous","push","status","text","headerError","get","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","json","_e_1","other","url","credentials","defaultRowMapping","tableMeta","toObject","target","chunks","ChunksToLines","finished","bufferReceived","cancellable","LineSplitter","_reuse","reusedValues","reuse","lastSplitLength","quoteCount","startIndex","count","val_1","getValue","toLineObserver","consumer","lastMeta","splitter","withReuse","expectMeta","firstColumnIndex","splitLine","startsWith","executor","isClosed","QuerySubscription","noop","decorator","ObservableQuery","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","_options","endsWith","TransportImpl","InfluxDB","timeout","canRetry","code","strings","parts","partIndex","sanitized","sanitizeDateTime","use"],"mappings":"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"}