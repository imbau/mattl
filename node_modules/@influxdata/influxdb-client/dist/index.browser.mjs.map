{"version":3,"file":"index.browser.mjs","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * writeFailed is called to inform about write error\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix\\@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n})\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  dateTime: (x: string): any => (x === '' ? null : x),\n  duration: (x: string): any => (x === '' ? null : x),\n}\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\n/**\n * FluxTableColumnLike provides metadata of a flux table column.\n */\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object - source object\n   * @returns column instance\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue ?? ''\n    return retVal\n  }\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) return strings[0] // the simplest case\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          throw new Error(\n            `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n          )\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines values of a single measurement.\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfxluDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      let delay = this.currentDelay\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options - query options to use\n   * @returns this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","canRetryHttpCall","error","canRetry","code","getRetryDelay","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","config","wrap","patterns","keys","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","matched","toEscape","escapeChar","toReplace","replaceChar","slice","index","undefined","length","EscaperConfig","escaperConfig","bindEsc","e","escape","bind","measurement",","," ","\n","\r","\t","quoted","\"","\\\\","tag","=","useProcessHrtime","use","lastMillis","Date","now","stepsInMillis","nanos","millis","String","substr","micros","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","value","toString","prepareRetVal","substring","c","charAt","fluxString","fluxInteger","sanitizeFloat","dot","fluxFloat","fluxDateTime","sanitizeDateTime","fluxDuration","sanitizeRegExp","fluxRegExp","fluxBool","fluxExpression","toFluxValue","toISOString","Array","isArray","map","flux","strings","parts","partIndex","text","sanitized","endsWith","startsWith","symbolObservable","observable","Point","measurementName","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","defaultTags","convertTime","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","RetryStrategyImpl","options","success","failedAttempts","delay","currentDelay","min","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","useDefaultTags","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","add","records","point","points","writePoint","withRetryBuffer","finally","remaining","close","key","pureJsChunkCombiner","second","Uint8Array","set","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","FetchTransport","connectionOptions","defaultHeaders","User-Agent","token","path","callbacks","observer","state","data","complete","responseStarted","completeCommunicationObserver","useCancellable","signal","controller","AbortController","abort","isCancelled","aborted","fetch","response","previous","push","status","headerError","get","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","json","other","url","credentials","defaultRowMapping","tableMeta","toObject","ChunksToLines","target","chunks","finished","bufferReceived","toUtf8String","cancellable","concat","copy","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","QuerySubscription","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","InfluxDB","_options","TransportImpl"],"mappings":"MAkBaA,EAAwD,CACnEC,QAAS,KAuDEC,EAAoCC,OAAOC,OAAO,CAC7DC,YAAa,IACbC,cAAe,IACfC,cAAe,KACfC,gBAAiB,IAINC,EAAqCN,OAAOC,sBACvDM,UAAW,IACXC,cAAe,IACfC,YAAa,aACbC,WAAY,EACZC,eAAgB,MACbZ,IC1DCa,EAAuB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,cAEjDC,EAAsBC,GACpC,OAAOF,EAAqBG,SAASD,SAI1BE,UAA6BC,MAExCC,YAAYC,GACVC,MAAMD,GACNnB,OAAOqB,eAAeC,KAAMN,EAAqBO,kBAOxCC,UAAkBP,MAI7BC,YACWJ,EACAW,EACAC,EACTC,GAEAP,QALSE,gBAAAR,EACAQ,mBAAAG,EACAH,UAAAI,EAIT1B,OAAOqB,eAAeC,KAAME,EAAUD,WAEpCD,KAAKH,QADHO,EACa,GAAGZ,KAAcW,OAAmBC,IAEpC,GAAGZ,KAAcW,IAElCH,KAAKM,cAAcD,GAGbT,cAAcS,GACM,iBAAfA,GAEL,WAAWE,KAAKF,GAClBL,KAAKQ,YAAcC,SAASJ,GAK9BL,KAAKQ,YAAc,EAIvBZ,WACE,OAAOL,EAAsBS,KAAKR,YAEpCI,aACE,OAAOI,KAAKQ,aAKhB,MAAME,EAAc,CAClB,aACA,YACA,kBACA,YACA,eACA,eACA,kBAQcC,EAAiBC,GAC/B,QAAKA,IAEyC,mBAA3BA,EAAcC,WACpBD,EAAcC,cACfD,EAAcE,OAAQJ,EAAYjB,SAAUmB,EAAcE,iBASxDC,EAAcH,EAAehC,GAC3C,GAAKgC,EAEE,CACL,IAAII,EACJ,MAAyC,mBAA7BJ,EAAcP,WACfO,EAAcP,cAEvBW,EAAS,EAEPpC,GAAeA,EAAc,EACxBoC,EAASC,KAAKC,MAAMD,KAAKE,SAAWvC,GAEpCoC,GAXT,OAAO,QAiBEI,UAA6BzB,MAExCC,cACEE,QACApB,OAAOqB,eAAeC,KAAMoB,EAAqBnB,WACjDD,KAAKH,QAAU,oBAEjBD,WACE,OAAO,EAETA,aACE,OAAO,SAKEyB,UAAmB1B,MAE9BC,cACEE,QACAE,KAAKsB,KAAO,aACZ5C,OAAOqB,eAAeC,KAAMqB,EAAWpB,WACvCD,KAAKH,QAAU,mBAEjBD,WACE,OAAO,EAETA,aACE,OAAO,GCtKX,MAAM2B,EAAW,sBAkCjB,MAAMC,EAGJ5B,YACU6B,EACAC,EAAe,IADf1B,YAAAyB,EACAzB,UAAA0B,EAER,MAAMC,EAAWjD,OAAOkD,KAAKH,GAC1BI,KAAK,KACLC,QAAQP,EAAU,QACrBvB,KAAK+B,IAAM,IAAIC,OAAO,IAAML,EAAW,IAAK,KAOvC/B,OAAOqC,GACZjC,KAAK+B,IAAIG,UAAY,EACrB,IAAIC,EAAanC,KAAK+B,IAAIG,UACtBE,EAAa,GACbC,EAAQrC,KAAK+B,IAAIO,KAAKL,GAE1B,KAAOI,GAAO,CACZ,MAAME,EAAUF,EAAM,GAChBG,EAAWxC,KAAKyB,OAAOc,GAASE,WAChCC,EAAY1C,KAAKyB,OAAOc,GAASI,YACvCP,GAAcH,EAAIW,MAAMT,EAAYE,EAAMQ,OAC1CT,GAA2BU,MAAbJ,EAAyBA,EAAYF,EAAWD,EAC9DJ,EAAanC,KAAK+B,IAAIG,UACtBG,EAAQrC,KAAK+B,IAAIO,KAAKL,GAGxB,OAAmB,IAAfE,EACKnC,KAAK0B,KAAOO,EAAMjC,KAAK0B,KAG5BS,EAAaF,EAAIc,OACZ/C,KAAK0B,KAAOU,EAAaH,EAAIW,MAAMT,GAAcnC,KAAK0B,KAGxD1B,KAAK0B,KAAOU,EAAapC,KAAK0B,MAIzC,MAAMsB,EAIJpD,YAAY6C,EAAqBE,GAC/B3C,KAAKyC,WAAaA,EAClBzC,KAAK2C,YAAcA,GAIvB,MAAMM,EAAgB,IAAID,EAxFP,MA0FbE,EAAWC,GAA0CA,EAAEC,OAAOC,KAAKF,GAK5DC,EAAS,CAIpBE,YAAaJ,EACX,IAAI1B,EAAQ,CACV+B,IAAKN,EACLO,IAAKP,EACLQ,KAAM,IAAIT,OAAcF,EAAW,OACnCY,KAAM,IAAIV,OAAcF,EAAW,OACnCa,KAAM,IAAIX,OAAcF,EAAW,UAOvCc,OAAQV,EACN,IAAI1B,EACF,CACEqC,IAAKZ,EACLa,OAAQb,GAEV,MAOJc,IAAKb,EACH,IAAI1B,EAAQ,CACV+B,IAAKN,EACLe,IAAKf,EACLO,IAAKP,EACLQ,KAAM,IAAIT,OAAcF,EAAW,OACnCY,KAAM,IAAIV,OAAcF,EAAW,OACnCa,KAAM,IAAIX,OAAcF,EAAW,oBCjIzBmB,EAAiBC,GAK7B,OAAO,EAOX,IAAIC,EAAaC,KAAKC,MAClBC,EAAgB,EACpB,SAASC,IAsBA,CACL,MAAMC,EAASJ,KAAKC,MAChBG,IAAWL,GACbA,EAAaK,EACbF,EAAgB,GAEhBA,IAEF,MAAMC,EAAQE,OAAOH,GACrB,OAAOG,OAAOD,GAhDE,YAgDoBE,OAAO,EAAG,EAAIH,EAAMxB,QAAUwB,GAItE,SAASI,IAQL,OAAOF,OAAOL,KAAKC,OA5DH,YA4DwBK,OAAO,EAAG,GAGtD,SAASF,IACP,OAAOC,OAAOL,KAAKC,OAErB,SAASO,IACP,OAAOH,OAAOxD,KAAK4D,MAAMT,KAAKC,MAAQ,YAQ3BS,EAAcpG,OAAOC,OAAO,CACvCoG,EAAGH,EACHI,GAAIR,EACJS,GAAIN,EACJO,GAAIX,EACJK,QAASA,EACTJ,OAAQA,EACRG,OAAQA,EACRJ,MAAOA,IAMIY,EAA0B,CACrCJ,EAAIK,GAAoB,GAAGnE,KAAK4D,MAAMO,EAAEC,UAAY,KACpDL,GAAKI,GAAoB,GAAGA,EAAEC,UAC9BJ,GAAKG,GAAuBA,EAAEC,UAAL,MACzBH,GAAKE,GAAuBA,EAAEC,UAAL,UC3FrBC,EAAYC,GAAmBA,EAKxBC,EAA4D,CACvEC,QAAUF,GAAyB,SAANA,EAC7BG,aAAeH,GAA0B,KAANA,EAAW,MAAQA,EACtDI,KAAOJ,GAA0B,KAANA,EAAW,MAAQA,EAC9CK,OAASL,GAA0B,KAANA,EAAW,MAAQA,EAChDM,OAAQP,EACRQ,aAAcR,EACdS,SAAWR,GAA0B,KAANA,EAAW,KAAOA,EACjDS,SAAWT,GAA0B,KAANA,EAAW,KAAOA,SAK9BU,EAKnBrG,YAAYsG,GACVA,EAAQC,QAAQ,CAACC,EAAKC,IAAOD,EAAIvD,MAAQwD,GACzCrG,KAAKkG,QAAUA,EAQjBtG,OAAO0G,GACL,IAAK,IAAID,EAAI,EAAGA,EAAIrG,KAAKkG,QAAQnD,OAAQsD,IAAK,CAC5C,MAAMD,EAAMpG,KAAKkG,QAAQG,GACzB,GAAID,EAAIE,QAAUA,EAAO,OAAOF,EAElC,MAAM,IAAI1G,EAAqB,UAAU4G,gBAM3C1G,SAAS2G,SACP,MAAMC,EAAW,GACjB,IAAK,IAAIH,EAAI,EAAGA,EAAIrG,KAAKkG,QAAQnD,QAAUsD,EAAIE,EAAOxD,OAAQsD,IAAK,CACjE,IAAIpE,EAAMsE,EAAOF,GACjB,MAAMI,EAASzG,KAAKkG,QAAQG,GAChB,KAARpE,GAAcwE,EAAOC,eACvBzE,EAAMwE,EAAOC,cAEfF,EAAIC,EAAOH,kBAAUd,EAAgBiB,EAAOE,yBAAarB,GAAUrD,GAErE,OAAOuE,SCjBUI,EA+BnBhH,YAAYiH,SACV,MAAM7F,EAAS,IAAI4F,EAKnB,OAJA5F,EAAOsF,MAAQO,EAAOP,MACtBtF,EAAO2F,SAAWE,EAAOF,SACzB3F,EAAO8F,MAAQC,QAAQF,EAAOC,OAC9B9F,EAAO0F,uBAAeG,EAAOH,4BAAgB,GACtC1F,SC5EEgG,EAAaC,OAAO,cAmBjC,MAAMC,EACJtH,YAAoBuH,GAAAnH,eAAAmH,EACpBvH,WACE,OAAOI,KAAKmH,UAEdvH,CAACoH,KACC,OAAOhH,KAAKmH,WAUhB,SAASC,EAAeC,GACtB,GAAIA,MAAAA,EAAuC,MAAO,GAClDA,EAAQA,EAAMC,WACd,IAAItG,OAAc8B,EACduD,EAAI,EACR,SAASkB,SACQzE,IAAX9B,IACFA,EAASqG,EAAMG,UAAU,EAAGnB,IAGhC,KAAOA,EAAIgB,EAAMtE,OAAQsD,IAAK,CAC5B,MAAMoB,EAAIJ,EAAMK,OAAOrB,GACvB,OAAQoB,GACN,IAAK,KACHF,IACAvG,GAAU,MACV,MACF,IAAK,KACHuG,IACAvG,GAAU,MACV,MACF,IAAK,KACHuG,IACAvG,GAAU,MACV,MACF,IAAK,IACL,IAAK,KACHuG,IACAvG,EAASA,EAAS,KAAOyG,EACzB,MACF,IAAK,IAEH,GAAIpB,EAAI,EAAIgB,EAAMtE,QAAkC,MAAxBsE,EAAMK,OAAOrB,EAAI,GAAY,CACvDkB,IACAlB,IACArF,GAAU,OACV,MAGY8B,MAAV9B,IACFA,GAAUyG,GAEZ,MACF,QACgB3E,MAAV9B,IACFA,GAAUyG,IAIlB,YAAe3E,IAAX9B,EACKA,EAEFqG,WAMOM,EAAWN,GACzB,OAAO,IAAIH,EAAc,IAAIE,EAAeC,gBAM9BO,EAAYP,GAC1B,MAAMpF,EAAMwC,OAAO4C,GACnB,IAAK,MAAMI,KAAKxF,EACd,GAAIwF,EAAI,KAAOA,EAAI,IAAK,MAAM,IAAI9H,MAAM,uBAAuBsC,GAEjE,OAAO,IAAIiF,EAAcjF,YASX4F,EAAcR,GAC5B,MAAMpF,EAAMwC,OAAO4C,GACnB,IAAIS,GAAM,EACV,IAAK,MAAML,KAAKxF,EAAK,CACnB,GAAU,MAANwF,EAAW,CACb,GAAIK,EAAK,MAAM,IAAInI,MAAM,qBAAqBsC,GAC9C6F,GAAOA,EAET,GAAU,MAANL,IAAcA,EAAI,KAAOA,EAAI,KAC/B,MAAM,IAAI9H,MAAM,qBAAqBsC,GAEzC,OAAOA,WAKO8F,EAAUV,GACxB,OAAO,IAAIH,EAAcW,EAAcR,aAUzBW,EAAaX,GAC3B,OAAO,IAAIH,EARb,SAA0BG,GACxB,MAAO,YAAYD,EAAeC,OAOTY,CAAiBZ,aAM5Ba,EAAab,GAC3B,OAAO,IAAIH,EAAc,gBAAgBE,EAAeC,QAG1D,SAASc,EAAed,GACtB,MAAO,sBAAsBD,EAAeC,gBAM9Be,EAAWf,GAEzB,OAAO,IAAIH,EAAciB,EAAed,aAM1BgB,EAAShB,GACvB,OACS,IAAIH,EADC,SAAVG,GAA8B,UAAVA,EACGA,KAECA,GAAOC,qBASrBgB,EAAejB,GAC7B,OAAO,IAAIH,EAAczC,OAAO4C,aAQlBkB,EAAYlB,GAC1B,QAAcvE,IAAVuE,EACF,MAAO,GACF,GAAc,OAAVA,EACT,MAAO,OACF,GAAqB,kBAAVA,EAChB,OAAOA,EAAMC,WACR,GAAqB,iBAAVD,EAChB,MAAO,IAAID,EAAeC,MACrB,GAAqB,iBAAVA,EAChB,OAAOQ,EAAcR,GAChB,GAAqB,iBAAVA,EAAoB,CACpC,GAAiC,mBAAtBA,EAAML,GACf,OAAOK,EAAML,KACR,GAAIK,aAAiBjD,KAC1B,OAAOiD,EAAMmB,cACR,GAAInB,aAAiBrF,OAC1B,OAAOmG,EAAed,GACjB,GAAIoB,MAAMC,QAAQrB,GACvB,MAAO,IAAIA,EAAMsB,IAAIJ,GAAa1G,KAAK,QAI3C,OAAO0G,EAAYlB,EAAMC,qBAOXsB,EACdC,KACGtC,GAEH,GAAsB,GAAlBsC,EAAQ9F,UAAiBwD,GAA4B,IAAlBA,EAAOxD,QAAe,OAAO8F,EAAQ,GAC5E,MAAMC,EAAQ,IAAIL,MAAcI,EAAQ9F,OAASwD,EAAOxD,QACxD,IAAIgG,EAAY,EAChB,IAAK,IAAI1C,EAAI,EAAGA,EAAIwC,EAAQ9F,OAAQsD,IAAK,CACvC,MAAM2C,EAAOH,EAAQxC,GAErB,GADAyC,EAAMC,KAAeC,EACjB3C,EAAIE,EAAOxD,OAAQ,CACrB,MAAMd,EAAMsE,EAAOF,GACnB,IAAI4C,EACJ,GACED,EAAKE,SAAS,MACd7C,EAAI,EAAIwC,EAAQ9F,QAChB8F,EAAQxC,EAAI,GAAG8C,WAAW,KAG1BF,EAAY7B,EAAenF,QAG3B,GADAgH,EAAYV,EAAYtG,GACN,KAAdgH,EACF,MAAM,IAAItJ,MACR,kCAAkCsC,gBAAkBoE,mBAAmBpE,KAI7E6G,EAAMC,KAAeE,OAChB,GAAI5C,EAAIwC,EAAQ9F,OAAS,EAC9B,MAAM,IAAIpD,MAAM,gCAIpB,OAAO2I,EAAeQ,EAAMjH,KAAK,WCpPtBuH,EAGQ,mBAAXnC,QAAyBA,OAAOoC,YAAe,qBCRpCC,EAWnB1J,YAAY2J,GATJvJ,UAAgC,GAChCA,YAAkC,GASpCuJ,IAAiBvJ,KAAKsB,KAAOiI,GAS5B3J,YAAY0B,GAEjB,OADAtB,KAAKsB,KAAOA,EACLtB,KAUFJ,IAAI0B,EAAc+F,GAEvB,OADArH,KAAKwJ,KAAKlI,GAAQ+F,EACXrH,KAUFJ,aAAa0B,EAAc+F,GAEhC,OADArH,KAAKyJ,OAAOnI,GAAQ+F,EAAQ,IAAM,IAC3BrH,KAUFJ,SAAS0B,EAAc+F,GAC5B,GAAqB,iBAAVA,EAAoB,CAC7B,IAAIpF,EACJ,GAAIyH,MAAOzH,EAAMxB,SAASgE,OAAO4C,KAC/B,MAAM,IAAI1H,MACR,oCAAoC2B,eAAkB+F,OAG1DA,EAAQpF,EAGV,OADAjC,KAAKyJ,OAAOnI,GAAWL,KAAK4D,MAAMwC,GAAd,IACbrH,KAUFJ,WAAW0B,EAAc+F,GAC9B,GAAqB,iBAAVA,EAAoB,CAC7B,IAAIpF,EACJ,GAAIyH,MAAOzH,EAAM0H,WAAWtC,IAC1B,MAAM,IAAI1H,MACR,kCAAkC2B,eAAkB+F,OAGxDA,EAAQpF,EAGV,OADAjC,KAAKyJ,OAAOnI,GAAQmD,OAAO4C,GACpBrH,KAUFJ,YAAY0B,EAAc+F,GAK/B,OAJIA,MAAAA,IACmB,iBAAVA,IAAoBA,EAAQ5C,OAAO4C,IAC9CrH,KAAKyJ,OAAOnI,GAAQ8B,EAAOQ,OAAOyD,IAE7BrH,KAcFJ,UAAUyH,GAEf,OADArH,KAAK4J,KAAOvC,EACLrH,KAQFJ,eAAeiK,GACpB,IAAK7J,KAAKsB,KAAM,OAChB,IAAIwI,EAAa,GAUjB,GATApL,OAAOkD,KAAK5B,KAAKyJ,QACdM,OACA5D,QAAQZ,IACP,GAAIA,EAAG,CACL,MAAMtD,EAAMjC,KAAKyJ,OAAOlE,GACpBuE,EAAW/G,OAAS,IAAG+G,GAAc,KACzCA,GAAc,GAAG1G,EAAOW,IAAIwB,MAAMtD,OAGd,IAAtB6H,EAAW/G,OAAc,OAC7B,IAAIiH,EAAW,GACf,MAAMR,EACJK,GAAYA,EAASI,2CACbJ,EAASI,aAAgBjK,KAAKwJ,MAClCxJ,KAAKwJ,KACX9K,OAAOkD,KAAK4H,GACTO,OACA5D,QAAQZ,IACP,GAAIA,EAAG,CACL,MAAMtD,EAAMuH,EAAKjE,GACbtD,IACF+H,GAAY,IACZA,GAAY,GAAG5G,EAAOW,IAAIwB,MAAMnC,EAAOW,IAAI9B,SAInD,IAAI2H,EAAO5J,KAAK4J,KAKhB,OAJIC,GAAYA,EAASK,cACvBN,EAAOC,EAASK,YAAYN,IAGvB,GAAGxG,EAAOE,YAAYtD,KAAKsB,QAAQ0I,KAAYF,SAC3ChH,IAAT8G,EAAqB,IAAMA,EAAO,KAItChK,WACE,MAAMuK,EAAOnK,KAAKoK,oBAAetH,GACjC,OAAOqH,GAAc,kBAAkBE,KAAKC,UAAUtK,UAAM8C;;;;;;;;;;;;;;qXCzJhE,IAAIyH,EAViC7L,OAAOC,OAAO,CACjDiB,MAAMC,EAASe,GAEb4J,QAAQ5J,MAAM,UAAYf,EAASe,GAAgB,KAErDhB,KAAKC,EAASe,GAEZ4J,QAAQC,KAAK,SAAW5K,EAASe,GAAgB,OAKrD,MAAM8J,EAAiB,CACrB9K,MAAMC,EAASe,GACb2J,EAAS3J,MAAMf,EAASe,IAE1BhB,KAAKC,EAASe,GACZ2J,EAASE,KAAK5K,EAASe,WClBd+J,EAIX/K,YAAYgL,GACV5K,KAAK4K,uCAAcnM,GAAsCmM,GACzD5K,KAAK6K,UAGPjL,UAAUgB,EAAekK,GACvB,MAAMC,EAAQhK,EAAcH,GAC5B,GAAImK,GAASA,EAAQ,EACnB,OAAOA,EAAQ9J,KAAKC,MAAMD,KAAKE,SAAWnB,KAAK4K,QAAQhM,aAClD,CACL,IAAImM,EAAQ/K,KAAKgL,aACjB,GAAIF,GAAkBA,EAAiB,EAAG,CAExCC,EAAQ/K,KAAK4K,QAAQ/L,cACrB,IAAK,IAAIwH,EAAI,EAAGA,EAAIyE,IAClBC,GAAgB/K,KAAK4K,QAAQ7L,kBACzBgM,GAAS/K,KAAK4K,QAAQ9L,gBAFQuH,KAMpC,OACEpF,KAAKgK,IAAIhK,KAAKiK,IAAIH,EAAO,GAAI/K,KAAK4K,QAAQ9L,eAC1CmC,KAAKC,MAAMD,KAAKE,SAAWnB,KAAK4K,QAAQhM,aAa5C,OAXWoB,KAAKgL,aACdhL,KAAKgL,aAAe/J,KAAKgK,IACvBhK,KAAKiK,IAAIlL,KAAKgL,aAAehL,KAAK4K,QAAQ7L,gBAAiB,GACzDkC,KAAKC,MAAMD,KAAKE,SAAWnB,KAAK4K,QAAQhM,aAC1CoB,KAAK4K,QAAQ9L,eAGfkB,KAAKgL,aACHhL,KAAK4K,QAAQ/L,cACboC,KAAKC,MAAMD,KAAKE,SAAWnB,KAAK4K,QAAQhM,aAErCoB,KAAKgL,cAGhBpL,UACEI,KAAKgL,kBAAelI,SCvCHqI,EAQnBvL,YACUwL,EACAC,GADArL,cAAAoL,EACApL,gBAAAqL,EAPVrL,UAAO,EACPA,mBAAgB,EAChBA,aAAS,EACDA,yBAAsB8C,EAU9BlD,SAAS0L,EAAiBC,EAAoBR,GAC5C,GAAI/K,KAAKwL,OAAQ,OACjB,IAAKF,EAAMvI,OAAQ,OACnB,MAAM0I,EAAYrH,KAAKC,MAAQ0G,EAG/B,GAFIU,EAAYzL,KAAK0L,gBAAe1L,KAAK0L,cAAgBD,GAErDzL,KAAK2L,OAAS3L,KAAK4L,KAAON,EAAMvI,OAAS/C,KAAKoL,SAAU,CAC1D,MAAMS,EAAW7L,KAAK4L,KAChBE,EAAqB,GAAXD,EAChB,EAAG,CACD,MAAME,EAAW/L,KAAK2L,MAAMK,KAC5BhM,KAAK4L,MAAQ5L,KAAK2L,MAAML,MAAMvI,OAC9B/C,KAAK2L,MAAQI,QACN/L,KAAK2L,OAAS3L,KAAK4L,KAAON,EAAMvI,OAAS+I,GAClDpB,EAAO9J,MACL,gBAAgBiL,EACd7L,KACG4L,oEACH5L,KAAKoL,kBAIX,MAAMa,EAAQ,CACZX,MAAAA,EACAC,WAAAA,GAEEvL,KAAKkM,MACPlM,KAAKkM,KAAKF,KAAOC,EACjBjM,KAAKkM,KAAOD,IAEZjM,KAAK2L,MAAQM,EACbjM,KAAKkM,KAAOD,EACZjM,KAAKmM,cAAcpB,IAErB/K,KAAK4L,MAAQN,EAAMvI,OAGrBnD,cACE,GAAII,KAAK2L,MAAO,CACd,MAAMS,EAAUpM,KAAK2L,MAIrB,OAHA3L,KAAK2L,MAAQ3L,KAAK2L,MAAMK,KACxBhM,KAAK4L,MAAQQ,EAAQd,MAAMvI,OACtB/C,KAAK2L,QAAO3L,KAAKkM,UAAOpJ,GACtBsJ,GAKXxM,cAAcmL,GACZ/K,KAAKqM,eAAiBC,WAAW,KAC/B,MAAMF,EAAUpM,KAAKuM,cACjBH,EACFpM,KAAKqL,WAAWe,EAAQd,MAAOc,EAAQb,YACpCiB,KAAK,KAEJxM,KAAKmM,cAlFM,KAoFZM,MAAMC,IAEL1M,KAAKmM,cAAcnM,KAAK0L,cAAgBtH,KAAKC,SAGjDrE,KAAKqM,oBAAiBvJ,GAEvBiI,GAGCnL,iDACJ,IAAIwM,EACJ,KAAQA,EAAUpM,KAAKuM,qBACfvM,KAAKqL,WAAWe,EAAQd,MAAOc,EAAQb,eAIjD3L,QAME,OALII,KAAKqM,iBACPM,aAAa3M,KAAKqM,gBAClBrM,KAAKqM,oBAAiBvJ,GAExB9C,KAAKwL,QAAS,EACPxL,KAAK4L,MC9FhB,MAAMgB,EAIJhN,YACUiN,EACAC,EACAC,GAFA/M,qBAAA6M,EACA7M,aAAA8M,EACA9M,kBAAA+M,EANV/M,YAAS,EAQPA,KAAKsL,MAAQ,IAAI7C,MAAcoE,GAGjCjN,IAAIoN,GACkB,IAAhBhN,KAAK+C,QACP/C,KAAK+M,eAEP/M,KAAKsL,MAAMtL,KAAK+C,QAAUiK,EAC1BhN,KAAK+C,SACD/C,KAAK+C,QAAU/C,KAAK6M,iBACtB7M,KAAKiN,QAAQR,MAAMC,OAKvB9M,QACE,MAAM0L,EAAQtL,KAAKkN,QACnB,OAAI5B,EAAMvI,OAAS,EACV/C,KAAK8M,QAAQxB,GAEb6B,QAAQC,UAGnBxN,QACE,MAAMoB,EAAShB,KAAKsL,MAAM1I,MAAM,EAAG5C,KAAK+C,QAExC,OADA/C,KAAK+C,OAAS,EACP/B,SAIUqM,GAkBnBzN,YACU0N,EACRC,EACAC,EACAC,EACAC,GAJQ1N,eAAAsN,EAjBFtN,aAAS,EAGTA,iBAA2B,CACjC2N,OAAQ,OACRC,QAAS,CACPC,eAAgB,8BAGZ7N,yBAAsB8C,EAc5B9C,KAAK8N,SAAW,qBAAqBC,mBACnCR,aACUQ,mBAAmBP,gBAAqBC,IACpDzN,KAAK0N,4CACA1O,GACA0O,GAEL1N,KAAK8E,YAAcA,EAAY2I,GAC/BzN,KAAKmF,wBAA0BA,EAAwBsI,GACnDzN,KAAK0N,aAAazD,aACpBjK,KAAKgO,eAAehO,KAAK0N,aAAazD,iBF3B1CW,EEiDE5K,KAAKiO,YAAc,IAAIrB,EACrB5M,KAAK0N,aAAazO,UAClBqM,IACEtL,KAAKkO,qBACElO,KAAKmO,UAAU7C,EAAOtL,KAAK0N,aAAatO,WAAa,IAvBvC,KACnBY,KAAK0N,aAAaxO,cAAgB,IACpCc,KAAKkO,qBAEAlO,KAAKwL,SACRxL,KAAKqM,eAAiBC,WACpB,IACEtM,KAAKmO,UACHnO,KAAKiO,YAAYf,QACjBlN,KAAK0N,aAAatO,WAAa,GAC/BqN,MAAMC,OAGV1M,KAAK0N,aAAaxO,mBAc1Bc,KAAKmO,UAAYnO,KAAKmO,UAAU9K,KAAKrD,MAErCA,KAAKoO,eF3DPxD,EE2DgD5K,KAAK0N,aFzD9C,IAAI/C,EAAkBC,IE0D3B5K,KAAKqO,YAAc,IAAIlD,EACrBnL,KAAK0N,aAAarO,eAClBW,KAAKmO,WAITvO,UAAU0L,EAAiBgD,GAEzB,MAAMC,EAAqBvO,KAC3B,OAAKA,KAAKwL,QAAUF,EAAMvI,OAAS,EAC1B,IAAIoK,QAAc,CAACC,EAASoB,KACjCxO,KAAKsN,UAAUmB,KAAKzO,KAAK8N,SAAUxC,EAAMzJ,KAAK,MAAO7B,KAAK0O,YAAa,CACrE9O,MAAMgB,GACJ,MAAMkK,EAAiByD,EAAKb,aAAatO,WAAa,EAAIkP,EAEpDK,EAAUJ,EAAKb,aAAavO,YAAYyP,KAC5CL,EACA3N,EACA0K,EACAR,GAEF,GAAI6D,EACFA,EAAQnC,KAAKY,EAASoB,OADxB,CAIA,IACGD,EAAK/C,QACN8C,EAAW,MACR1N,aAAiBV,IACjBU,EAAoBpB,YAAc,KAarC,OAXAkL,EAAOD,KACL,iDAAiD6D,EAC/C,MACF1N,GAEF2N,EAAKF,YAAYQ,SACfvD,EACAgD,EAAW,EACXC,EAAKH,cAAcU,UAAUlO,EAAOkK,SAEtC0D,EAAO5N,GAGT8J,EAAO9J,MAAM,4BAA6BA,GAC1C4N,EAAO5N,KAEThB,WACE2O,EAAKH,cAAcvD,UACnBuC,SAKCD,QAAQC,UAIXxN,0BACsBkD,IAAxB9C,KAAKqM,iBACPM,aAAa3M,KAAKqM,gBAClBrM,KAAKqM,oBAAiBvJ,GAI1BlD,YAAYoN,GACVhN,KAAKiO,YAAYc,IAAI/B,GAEvBpN,aAAaoP,GACX,IAAK,IAAI3I,EAAI,EAAGA,EAAI2I,EAAQjM,OAAQsD,IAClCrG,KAAKiO,YAAYc,IAAIC,EAAQ3I,IAGjCzG,WAAWqP,GACT,MAAM9E,EAAO8E,EAAM7E,eAAepK,MAC9BmK,GAAMnK,KAAKiO,YAAYc,IAAI5E,GAEjCvK,YAAYsP,GACV,IAAK,IAAI7I,EAAI,EAAGA,EAAI6I,EAAOnM,OAAQsD,IACjCrG,KAAKmP,WAAWD,EAAO7I,IAGrBzG,MAAMwP,4CAEV,SADMpP,KAAKiO,YAAYhB,QACnBmC,EACF,aAAapP,KAAKqO,YAAYpB,WAGlCrN,QAWE,OAVeI,KAAKiO,YAAYhB,QAAQoC,QAAQ,KAC9C,MAAMC,EAAYtP,KAAKqO,YAAYkB,QAC/BD,GACF5E,EAAO9J,MACL,4BAA4B0O,6CAC5B,MAGJtP,KAAKwL,QAAS,IAIlB5L,UAGE,OAFAI,KAAKkO,qBACLlO,KAAKwL,QAAS,EACPxL,KAAKqO,YAAYkB,QAAUvP,KAAKiO,YAAYlL,OAKrDnD,eAAe4J,GAOb,OANAxJ,KAAKiK,iBAAcnH,EACnBpE,OAAOkD,KAAK4H,GAAMrD,QAASqJ,KACvBxP,KAAKiK,cAAgBjK,KAAKiK,YAAc,KAAKuF,GAAOpM,EAAOW,IAC3DyF,EAAKgG,MAGFxP,KAETJ,YAAYyH,GACV,YAAcvE,IAAVuE,EACKrH,KAAK8E,cACc,iBAAVuC,EACTA,EAAMtE,OAAS,EAAIsE,OAAQvE,EACzBuE,aAAiBjD,KACnBpE,KAAKmF,wBAAwBkC,GAE7B5C,OADmB,iBAAV4C,EACFpG,KAAK4D,MAAMwC,GAGXA,IC1PpB,MAAMoI,GAAqC,CACzC7P,OAAO+L,EAAmB+D,GACxB,MAAM1O,EAAS,IAAI2O,WAAWhE,EAAM5I,OAAS2M,EAAO3M,QAGpD,OAFA/B,EAAO4O,IAAIjE,GACX3K,EAAO4O,IAAIF,EAAQ/D,EAAM5I,QAClB/B,GAETpB,aAAaiQ,EAAmBC,EAAeC,GAE7C,IAAIC,EAAIC,EAAIC,EAAIC,EACZC,EAAM,GACN/J,EAAIyJ,EACR,KAAOzJ,EAAI0J,GAET,OADAC,EAAKH,EAAMxJ,KACH2J,GAAM,GACZ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAEHI,GAAO3L,OAAO4L,aAAaL,GAC3B,MACF,KAAK,GACL,KAAK,GAEHC,EAAKJ,EAAMxJ,KACX+J,GAAO3L,OAAO4L,cAAoB,GAALL,IAAc,EAAW,GAALC,GACjD,MACF,KAAK,GAEHA,EAAKJ,EAAMxJ,KACX6J,EAAKL,EAAMxJ,KACX+J,GAAO3L,OAAO4L,cACL,GAALL,IAAc,IAAa,GAALC,IAAc,EAAW,GAALC,GAE9C,MACF,KAAK,GAEHD,EAAKJ,EAAMxJ,KACX6J,EAAKL,EAAMxJ,KACX8J,EAAKN,EAAMxJ,KACX+J,GAAO3L,OAAO6L,eACL,EAALN,IAAc,IACP,GAALC,IAAc,IACT,GAALC,IAAc,EACV,GAALC,GAKX,OAAOC,GAGTxQ,KAAKiQ,EAAmBC,EAAeC,GACrC,MAAM/O,EAAS,IAAI2O,WAAWI,EAAMD,GAEpC,OADA9O,EAAO4O,IAAIC,EAAMjN,MAAMkN,EAAOC,IACvB/O,UC7CUuP,GAGnB3Q,YAAoB4Q,GAAAxQ,uBAAAwQ,EAFpBxQ,mBAAgByP,GAGdzP,KAAKyQ,eAAiB,CACpB5C,eAAgB,kCAChB6C,aAAc,4BAEZ1Q,KAAKwQ,kBAAkBG,QACzB3Q,KAAKyQ,eAA8B,cACjC,SAAWzQ,KAAKwQ,kBAAkBG,OAGxC/Q,KACEgR,EACAxQ,EACAwK,EACAiG,GAEA,MAAMC,WCjCRD,EAAiD,IAEjD,IAAIE,EAAQ,EA+BZ,MA9Be,CACb/E,KAAOgF,IAEO,IAAVD,GACAF,EAAU7E,MADV+E,MAEAC,GAGAH,EAAU7E,KAAKgF,IAGnBpQ,MAAQA,IAEQ,IAAVmQ,IACFA,EAAQ,EAEJF,EAAUjQ,OAAOiQ,EAAUjQ,MAAMA,KAGzCqQ,SAAU,KACM,IAAVF,IACFA,EAAQ,EAEJF,EAAUI,UAAUJ,EAAUI,aAGtCC,gBAAkBtD,IACZiD,EAAUK,iBAAiBL,EAAUK,gBAAgBtD,KDG1CuD,CAA8BN,GAC/C,GAAIA,GAAaA,EAAUO,iBAAoBxG,EAAgByG,OAAQ,CACrE,MAAMC,EAAa,IAAIC,gBACjBF,EAASC,EAAWD,OAC1BR,EAAUO,eAAe,CACvBxR,SACE0R,EAAWE,SAEbC,YAAW,IACFJ,EAAOK,UAIpB1R,KAAK2R,MAAMf,EAAMxQ,EAAMwK,GACpB4B,KAAWoF,qCACV,GAAIf,MAAAA,SAAAA,EAAWK,gBAAiB,CAC9B,MAAMtD,EAAmB,GACzBgE,EAAShE,QAAQzH,QAAQ,CAACkB,EAAemI,KACvC,MAAMqC,EAAWjE,EAAQ4B,QACR1M,IAAb+O,EACFjE,EAAQ4B,GAAOnI,EACNoB,MAAMC,QAAQmJ,GACvBA,EAASC,KAAKzK,GAEduG,EAAQ4B,GAAO,CAACqC,EAAUxK,KAG9ByJ,EAASI,gBAAgBtD,GAE3B,GAAIgE,EAASG,QAAU,IACrB,OAAOH,EACJ5I,OACAwD,KAAMxD,IACL,IAAKA,EAAM,CACT,MAAMgJ,EAAcJ,EAAShE,QAAQqE,IAAI,oBACrCD,IACFhJ,EAAOgJ,GAGXlB,EAASlQ,MACP,IAAIV,EACF0R,EAASG,OACTH,EAASM,WACTlJ,EACA4I,EAAShE,QAAQqE,IAAI,mBAI1BxF,MAAOtJ,IACNuH,EAAOD,KAAK,+BAAgCtH,GAC5C2N,EAASlQ,MACP,IAAIV,EACF0R,EAASG,OACTH,EAASM,gBACTpP,EACA8O,EAAShE,QAAQqE,IAAI,mBAK7B,GAAIL,EAASxR,KAAM,CACjB,MAAM+R,EAASP,EAASxR,KAAKgS,YAC7B,IAAIvC,EACJ,GACEA,QAAcsC,EAAOE,OACrBvB,EAAS9E,KAAK6D,EAAMxI,cACZwI,EAAMyC,WACX,GAAIV,EAASW,YAAa,CAC/B,MAAMC,QAAeZ,EAASW,cAC9BzB,EAAS9E,KAAK,IAAI2D,WAAW6C,QACxB,CACL,MAAMxJ,QAAa4I,EAAS5I,OAC5B8H,EAAS9E,MAAK,IAAIyG,aAAcC,OAAO1J,SAI5CyD,MAAMtJ,GAAK2N,EAASlQ,MAAMuC,IAC1BkM,QAAQ,IAAMyB,EAASG,YAEtBrR,QAAQgR,EAAcxQ,EAAWwK,4CACrC,MAAMgH,QAAiB5R,KAAK2R,MAAMf,EAAMxQ,EAAMwK,IACxCmH,OAACA,EAAMnE,QAAEA,GAAWgE,EACpBe,EAAsB/E,EAAQqE,IAAI,iBAAmB,GAE3D,IAAIjB,OAAOlO,EACX,IACM6P,EAAoBlT,SAAS,QAC/BuR,QAAaY,EAASgB,OACbD,EAAoBlT,SAAS,UACtCuR,QAAaY,EAAS5I,QAExB,MAAO0D,GAEPhC,EAAOD,KAAK,4BAA6BiC,GAE3C,GAAIqF,GAAU,IAAK,CACjB,IAAKf,EAAM,CACT,MAAMgB,EAAcpE,EAAQqE,IAAI,oBAC5BD,IACFhB,EAAOgB,GAGX,MAAM,IAAI9R,EACR6R,EACAH,EAASM,WACTlB,EACAY,EAAShE,QAAQqE,IAAI,gBAGzB,OAAOjB,KAGDpR,MACNgR,EACAxQ,EACAwK,GAEA,MAAM+C,OAACA,EAAMC,QAAEA,GAAqBhD,EAATiI,4UAASjI,EAA9B,sBACN,OAAO+G,MAAM,GAAG3R,KAAKwQ,kBAAkBsC,MAAMlC,mBAC3CjD,OAAQA,EACRvN,KACa,QAAXuN,GAA+B,SAAXA,OAChB7K,EACgB,iBAAT1C,EACPA,EACAiK,KAAKC,UAAUlK,GACrBwN,uCACK5N,KAAKyQ,gBACL7C,GAELmF,YAAa,QAEVF,cEhKOG,GACdzM,EACA0M,GAEA,OAAOA,EAAUC,SAAS3M,SCNP4M,GAInBvT,YACUwT,EACAC,GADArT,YAAAoT,EACApT,YAAAqT,EAJVrT,eAAW,EAOXJ,KAAKiQ,GACH,IAAI7P,KAAKsT,SACT,IACEtT,KAAKuT,eAAe1D,GACpB,MAAO1M,GACPnD,KAAKY,MAAMuC,IAGfvD,MAAMgB,GACCZ,KAAKsT,WACRtT,KAAKsT,UAAW,EAChBtT,KAAKoT,OAAOxS,MAAMA,IAGtBhB,WACOI,KAAKsT,WACJtT,KAAK6R,UACP7R,KAAKoT,OAAOpH,KACVhM,KAAKqT,OAAOG,aAAaxT,KAAK6R,SAAU,EAAG7R,KAAK6R,SAAS9O,SAG7D/C,KAAKsT,UAAW,EAChBtT,KAAKoT,OAAOnC,YAGhBrR,eAAe6T,GACbzT,KAAKoT,OAAOhC,gBAAkBpR,KAAKoT,OAAOhC,eAAeqC,GAGnD7T,eAAeiQ,GACrB,IAAIhN,EACAiN,EAAQ,EACR9P,KAAK6R,UACPhC,EAAQ7P,KAAKqT,OAAOK,OAAO1T,KAAK6R,SAAUhC,GAC1ChN,EAAS7C,KAAK6R,SAAoB9O,QAElCF,EAAQ,EAEV,IAAIe,GAAS,EACb,KAAOf,EAAQgN,EAAM9M,QAAQ,CAC3B,MAAM0E,EAAIoI,EAAMhN,GAChB,GAAU,KAAN4E,GACF,IAAK7D,EAAQ,CAEX,MAAMmM,EAAMlN,EAAQ,GAA0B,KAArBgN,EAAMhN,EAAQ,GAAYA,EAAQ,EAAIA,EAC/D7C,KAAKoT,OAAOpH,KAAKhM,KAAKqT,OAAOG,aAAa3D,EAAOC,EAAOC,IACxDD,EAAQjN,EAAQ,QAEH,KAAN4E,IACT7D,GAAUA,GAEZf,IAGA7C,KAAK6R,SADH/B,EAAQjN,EACM7C,KAAKqT,OAAOM,KAAK9D,EAAOC,EAAOjN,QAE/BC,SCjED8Q,GAArBhU,cAKUI,aAAS,EAKjB6T,YACE,OAAO7T,KAAK8T,OAEdD,UAAU5R,GACJA,IAAQjC,KAAK+T,eACf/T,KAAK+T,aAAe,IAAItL,MAAM,KAEhCzI,KAAK8T,OAAS7R,EAMhBrC,YAEE,OADAI,KAAK6T,OAAQ,EACN7T,KASTJ,UAAUuK,GACR,GAAIA,MAAAA,EAEF,OADAnK,KAAKgU,gBAAkB,EAChB,GAET,IAAIC,EAAa,EACbC,EAAa,EACjB,MAAM3N,EAASvG,KAAK8T,OAAS9T,KAAK+T,aAAe,GACjD,IAAII,EAAQ,EACZ,IAAK,IAAI9N,EAAI,EAAGA,EAAI8D,EAAKpH,OAAQsD,IAAK,CACpC,MAAMoB,EAAI0C,EAAK9D,GACf,GAnDY,MAmDRoB,GACF,GAAIwM,EAAa,GAAM,EAAG,CACxB,MAAMhS,EAAMjC,KAAKoU,SAASjK,EAAM+J,EAAY7N,EAAG4N,GAC3CjU,KAAK8T,OACPvN,EAAO4N,KAAWlS,EAElBsE,EAAOuL,KAAK7P,GAEdiS,EAAa7N,EAAI,EACjB4N,EAAa,OA3DP,MA6DCxM,GACTwM,IAGJ,MAAMhS,EAAMjC,KAAKoU,SAASjK,EAAM+J,EAAY/J,EAAKpH,OAAQkR,GASzD,OARIjU,KAAK8T,QACPvN,EAAO4N,GAASlS,EAChBjC,KAAKgU,gBAAkBG,EAAQ,IAE/B5N,EAAOuL,KAAK7P,GACZjC,KAAKgU,gBAAkBzN,EAAOxD,QAGzBwD,EAGD3G,SACNuK,EACA2F,EACAC,EACAkE,GAEA,OAAInE,IAAU3F,EAAKpH,OACV,GACiB,IAAfkR,EACF9J,EAAK3C,UAAUsI,EAAOC,GACL,IAAfkE,EACF9J,EAAK3C,UAAUsI,EAAQ,EAAGC,EAAM,GAGhC5F,EAAK3C,UAAUsI,EAAQ,EAAGC,EAAM,GAAGjO,QAAQ,OAAQ,eCrFhDuS,GACdC,GAEA,MAAMC,GAAW,IAAIX,IAAeY,YACpC,IAAItO,EAGAuO,EAFAC,GAAa,EACbC,EAAmB,EAEvB,MAAO,CACL/U,MAAMgB,GACJ0T,EAAS1T,MAAMA,IAEjBhB,KAAKuK,GACH,GAAa,KAATA,EACFuK,GAAa,EACbxO,OAAUpD,MACL,CACL,MAAMyD,EAASgO,EAASK,UAAUzK,GAC5ByB,EAAO2I,EAASP,gBACtB,GAAIU,EAAY,CAEd,IAAKxO,EAAS,CACZA,EAAU,IAAIuC,MAAMmD,GACpB,IAAK,IAAIvF,EAAI,EAAGA,EAAIuF,EAAMvF,IACxBH,EAAQG,GAAK,IAAIO,EAGrB,GAAKL,EAAO,GAAG4C,WAAW,MAanB,GAAkB,cAAd5C,EAAO,GAChB,IAAK,IAAIF,EAAI,EAAGA,EAAIuF,EAAMvF,IACxBH,EAAQG,GAAGM,SAAWJ,EAAOF,QAE1B,GAAkB,aAAdE,EAAO,GAChB,IAAK,IAAIF,EAAI,EAAGA,EAAIuF,EAAMvF,IACxBH,EAAQG,GAAGK,aAAeH,EAAOF,QAE9B,GAAkB,WAAdE,EAAO,GAChB,IAAK,IAAIF,EAAI,EAAGA,EAAIuF,EAAMvF,IACxBH,EAAQG,GAAGS,MAAyB,MAAjBP,EAAOF,GAAG,OAvBD,CAEZ,KAAdE,EAAO,IACToO,EAAmB,EACnBzO,EAAUA,EAAQtD,MAAM,IAExB+R,EAAmB,EAErB,IAAK,IAAItO,EAAIsO,EAAkBtO,EAAIuF,EAAMvF,IACvCH,EAAQG,EAAIsO,GAAkBrO,MAAQC,EAAOF,GAE/CoO,EAAW,IAAIxO,EAAkBC,GACjCwO,GAAa,QAefJ,EAAStI,KAAKzF,EAAO3D,MAAM+R,EAAkB/I,GAAO6I,KAI1D7U,WACE0U,EAASrD,YAEXrR,eAAe6T,GACTa,EAASlD,gBAAgBkD,EAASlD,eAAeqC,KCrD3D,MAAMoB,GAIJjV,YAAmBkR,EAA4BgE,GAFvC9U,eAAW,EAGjB,IACE8U,EAAS,CACP9I,KAAM3E,IACJyJ,EAAS9E,KAAK3E,IAEhBzG,MAAOuC,IACLnD,KAAK+U,UAAW,EAChBjE,EAASlQ,MAAMuC,IAEjB8N,SAAU,KACRjR,KAAK+U,UAAW,EAChBjE,EAASG,YAEXG,eAAgB3J,IACdzH,KAAKyT,YAAchM,KAGvB,MAAOtE,GACPnD,KAAK+U,UAAW,EAChBjE,EAASlQ,MAAMuC,IAInBqI,aACE,OAAOxL,KAAK+U,SAGPnV,8BACLI,KAAKyT,4BAAauB,SAClBhV,KAAK+U,UAAW,GAIpB,SAASE,YAYYC,GACnBtV,YACmBkV,EACAK,GADAnV,cAAA8U,EACA9U,eAAAmV,EAGZvV,UACLwV,EACAxU,EACAqQ,GAEA,MAAMH,EArBV,SAA6BA,GAC3B,MAAM9E,KAACA,EAAIpL,MAAEA,EAAKqQ,SAAEA,GAAYH,EAEhC,MAAO,CACL9E,KAAMA,EAAOA,EAAK3I,KAAKyN,GAAYmE,GACnCrU,MAAOA,EAAQA,EAAMyC,KAAKyN,GAAYmE,GACtChE,SAAUA,EAAWA,EAAS5N,KAAKyN,GAAYmE,IAe9BI,CACW,iBAAnBD,GAAkD,OAAnBA,EAClC,CAACpJ,KAAMoJ,EAAgBxU,MAAAA,EAAOqQ,SAAAA,GAC9BmE,GAGN,OAAO,IAAIP,GAAkB7U,KAAKmV,UAAUrE,GAAW9Q,KAAK8U,UAGvDlV,CAACwJ,KACN,OAAOpJ,MC7EX,MAAMsV,GAAuB,CAC3BC,QAAQ,EACRC,UAAW,IACXC,UAAW,IACXC,cAAe,IACfC,YAAa,CAAC,WAAY,QAAS,YAE/BrQ,GAAe+B,GAAgBA,QAExBuO,GAEXhW,YAAoB0N,EAAsBC,GAAtBvN,eAAAsN,EAClBtN,KAAK4K,QAAU,CAAC2C,IAAAA,GAGlB3N,KAAKgL,GAEH,OADA5K,KAAK4K,uCAAc5K,KAAK4K,SAAYA,GAC7B5K,KAGTJ,MAAMiW,GACJ,OAAO,IAAIX,GAAgBlV,KAAK8V,eAAeD,GAAQvQ,IAGzD1F,KAAKiW,GACH,OAAO,IAAIX,GAAgBlV,KAAK8V,eAAeD,GAAQ/E,GAC9CuD,GAAe,CACpBzU,KAAK2G,EAAQ0M,GACXnC,EAAS9E,KAAK,CAACzF,OAAAA,EAAQ0M,UAAAA,KAEzBrT,MAAMuD,GACJ2N,EAASlQ,MAAMuC,IAEjBvD,WACEkR,EAASG,eAMjBrR,WACEiW,EACAvB,GAEAtU,KAAK8V,eAAeD,EAApB7V,CAA2BsU,GAG7B1U,UACEiW,EACAvB,GAEAtU,KAAK8V,eAAeD,EAApB7V,CAA2BqU,GAAeC,IAG5C1U,YACEiW,EACAE,EAGqB/C,IAKrB,MAAMhS,EAAmB,GACzB,OAAO,IAAImM,QAAQ,CAACC,EAASoB,KAC3BxO,KAAKgW,UAAUH,EAAO,CACpBjW,KAAK2G,EAAkB0M,GACrB,MAAMhH,EAAQ8J,EAAUnH,KAAK5O,KAAMuG,EAAQ0M,QAC7BnQ,IAAVmJ,GACFjL,EAAO8Q,KAAK7F,IAGhBrM,MAAMgB,GACJ4N,EAAO5N,IAEThB,WACEwN,EAAQpM,QAMhBpB,aAAaiW,GACX,MAAM7U,EAAwB,GAC9B,OAAO,IAAImM,QAAQ,CAACC,EAASoB,KAC3BxO,KAAKiW,WAAWJ,EAAO,CACrBjW,KAAKuK,GACHnJ,EAAO8Q,KAAK3H,IAEdvK,MAAMgB,GACJ4N,EAAO5N,IAEThB,WACEwN,EAAQpM,QAMRpB,eAAeiW,GACrB,MAAMtI,IAACA,EAAG2I,KAAEA,EAAIC,KAAEA,GAAQnW,KAAK4K,QAE/B,OAAQ0J,IACNtU,KAAKsN,UAAUmB,KACb,qBAAqBV,mBAAmBR,GACxClD,KAAKC,UACHtK,KAAKoW,gBAAgB,CACnBP,MAAOA,EAAMvO,WACb+O,QAASf,GACTY,KAAAA,KAGJ,CACEvI,OAAQ,OACRC,QAAS,CACPC,eAAgB,mCAChByI,kBAAmBH,EAAO,OAAS,aAGvC,IAAIhD,GAAcmB,EAAUtU,KAAKsN,UAAUiJ,iBAIzC3W,gBAAgB4W,SAMtB,MALgC,mBAArBxW,KAAK4K,QAAQvG,MACtBmS,EAAQnS,IAAMrE,KAAK4K,QAAQvG,OAG7BmS,EAAQN,eAAOlW,KAAK4K,QAAQsL,oBAAQ,OAC7BM,SC9HUC,GAQnB7W,YAAYgL,SACV,GAAuB,iBAAZA,EACT5K,KAAK0W,SAAW,CAAC5D,IAAKlI,OACjB,CAAA,GAAgB,OAAZA,GAAuC,iBAAZA,EAGpC,MAAM,IAAIlL,EAAqB,sCAF/BM,KAAK0W,SAAW9L,EAIlB,MAAMkI,EAAM9S,KAAK0W,SAAS5D,IAC1B,GAAmB,iBAARA,EACT,MAAM,IAAIpT,EAAqB,qBAC7BoT,EAAI5J,SAAS,OAAMlJ,KAAK0W,SAAS5D,IAAMA,EAAItL,UAAU,EAAGsL,EAAI/P,OAAS,IACzE/C,KAAKsN,oBAAYtN,KAAK0W,SAASpJ,yBAAa,IAAIqJ,GAAc3W,KAAK0W,UAqBrE9W,YACE2N,EACAC,EACAC,OACAC,GAEA,OAAO,IAAIL,GACTrN,KAAKsN,UACLC,EACAC,EACAC,EACAC,MAAAA,EAAAA,EAAgB1N,KAAK0W,SAAShJ,cAgBlC9N,YAAY2N,GACV,OAAO,IAAIqI,GAAa5V,KAAKsN,UAAWC"}