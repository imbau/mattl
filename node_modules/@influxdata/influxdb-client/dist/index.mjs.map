{"version":3,"file":"index.mjs","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/node/nodeChunkCombiner.ts","../src/impl/version.ts","../src/impl/node/NodeHttpTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * writeFailed is called to inform about write error\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix\\@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n})\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  dateTime: (x: string): any => (x === '' ? null : x),\n  duration: (x: string): any => (x === '' ? null : x),\n}\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\n/**\n * FluxTableColumnLike provides metadata of a flux table column.\n */\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object - source object\n   * @returns column instance\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue ?? ''\n    return retVal\n  }\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) return strings[0] // the simplest case\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          throw new Error(\n            `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n          )\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines values of a single measurement.\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfxluDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      let delay = this.currentDelay\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../../transport'\nimport {Buffer} from 'buffer'\n\nconst nodeChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    return Buffer.concat([first, second])\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    return (chunk as Buffer).toString('utf-8', start, end)\n  },\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = Buffer.allocUnsafe(end - start)\n    ;(chunk as Buffer).copy(retVal, 0, start, end)\n    return retVal\n  },\n}\n\nexport default nodeChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.6.0'\n","import {ConnectionOptions, DEFAULT_ConnectionOptions} from '../../options'\nimport {parse} from 'url'\nimport * as http from 'http'\nimport * as https from 'https'\nimport {Buffer} from 'buffer'\nimport {RequestTimedOutError, AbortError, HttpError} from '../../errors'\nimport {\n  CommunicationObserver,\n  Transport,\n  SendOptions,\n  Headers,\n  ChunkCombiner,\n} from '../../transport'\nimport Cancellable from '../../util/Cancellable'\nimport nodeChunkCombiner from './nodeChunkCombiner'\nimport zlib from 'zlib'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {CLIENT_LIB_VERSION} from '../version'\n\nconst zlibOptions = {\n  flush: zlib.Z_SYNC_FLUSH,\n  finishFlush: zlib.Z_SYNC_FLUSH,\n}\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nclass CancellableImpl implements Cancellable {\n  private cancelled = false\n  cancel(): void {\n    this.cancelled = true\n  }\n  isCancelled(): boolean {\n    return this.cancelled\n  }\n}\n\n/**\n * Transport layer on top of node http or https library.\n */\nexport class NodeHttpTransport implements Transport {\n  /* required transport member */\n  readonly chunkCombiner: ChunkCombiner = nodeChunkCombiner\n\n  private defaultOptions: {[key: string]: any}\n  private requestApi: (\n    options: http.RequestOptions,\n    callback: (res: http.IncomingMessage) => void\n  ) => http.ClientRequest\n  /**\n   * Creates a node transport using for the client options supplied.\n   * @param connectionOptions - connection options\n   */\n  constructor(private connectionOptions: ConnectionOptions) {\n    const url = parse(connectionOptions.url)\n    this.defaultOptions = {\n      ...DEFAULT_ConnectionOptions,\n      ...connectionOptions,\n      ...connectionOptions.transportOptions,\n      port: url.port,\n      protocol: url.protocol,\n      hostname: url.hostname,\n    }\n    if (url.protocol === 'http:') {\n      this.requestApi = http.request\n    } else if (url.protocol === 'https:') {\n      this.requestApi = https.request\n    } else {\n      throw new Error(\n        `Unsupported protocol \"${url.protocol} in URL: \"${connectionOptions.url}\"`\n      )\n    }\n  }\n\n  /**\n   * Sends data to server and receives communication events via communication callbacks.\n   *\n   * @param path - HTTP request  path\n   * @param body - message body\n   * @param headers - HTTP headers\n   * @param method - HTTP method\n   * @param callbacks - communication callbacks\n   */\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const message = this.createRequestMessage(path, body, options)\n    const cancellable = new CancellableImpl()\n    if (callbacks && callbacks.useCancellable)\n      callbacks.useCancellable(cancellable)\n    this._request(message, cancellable, callbacks)\n  }\n\n  /**\n   * Sends data to the server and receives decoded result. The type of the result depends on\n   * response's content-type (deserialized json, text).\n  \n   * @param path - HTTP path\n   * @param requestBody - request body\n   * @param options - send options\n   * @returns Promise of response body\n   */\n  request(path: string, body: any, options: SendOptions): Promise<any> {\n    if (!body) {\n      body = ''\n    } else if (typeof body !== 'string') {\n      body = JSON.stringify(body)\n    }\n    let buffer = emptyBuffer\n    let contentType: string\n    return new Promise((resolve, reject) => {\n      this.send(path, body as string, options, {\n        responseStarted(headers: Headers) {\n          contentType = String(headers['content-type'])\n        },\n        next: (data: Uint8Array): void => {\n          buffer = Buffer.concat([buffer, data])\n        },\n        complete: (): void => {\n          try {\n            if (contentType.includes('json')) {\n              resolve(JSON.parse(buffer.toString('utf8')))\n            } else if (contentType.includes('text')) {\n              resolve(buffer.toString('utf8'))\n            } else {\n              resolve(buffer)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        },\n        error: (e: Error): void => {\n          reject(e)\n        },\n      })\n    })\n  }\n\n  /**\n   * Creates configuration for a specific request.\n   *\n   * @param path - API path starting with '/' and containing also query parameters\n   * @param headers - HTTP headers to use\n   * @param method - HTTP method\n   * @param body - request body, will be utf-8 encoded\n   * @returns a configuration object that is suitable for making the request\n   */\n  private createRequestMessage(\n    path: string,\n    body: string,\n    sendOptions: SendOptions\n  ): {[key: string]: any} {\n    const bodyBuffer = Buffer.from(body, 'utf-8')\n    const headers: {[key: string]: any} = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      headers.authorization = 'Token ' + this.connectionOptions.token\n    }\n    const options: {[key: string]: any} = {\n      ...this.defaultOptions,\n      path,\n      method: sendOptions.method,\n      headers: {\n        ...headers,\n        ...sendOptions.headers,\n      },\n      body: bodyBuffer,\n    }\n    options.headers['content-length'] = bodyBuffer.length\n\n    return options\n  }\n\n  private _request(\n    requestMessage: {[key: string]: any},\n    cancellable: CancellableImpl,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const listeners = completeCommunicationObserver(callbacks)\n    if (cancellable.isCancelled()) {\n      listeners.complete()\n      return\n    }\n    const req = this.requestApi(requestMessage, (res: http.IncomingMessage) => {\n      if (cancellable.isCancelled()) {\n        res.resume()\n        listeners.complete()\n        return\n      }\n      res.on('aborted', () => {\n        listeners.error(new AbortError())\n      })\n      listeners.responseStarted(res.headers)\n      /* istanbul ignore next statusCode is optional in http.IncomingMessage */\n      const statusCode = res.statusCode ?? 600\n      const contentEncoding = res.headers['content-encoding']\n      let responseData\n      if (contentEncoding === 'gzip') {\n        responseData = zlib.createGunzip(zlibOptions)\n        res.pipe(responseData)\n      } else {\n        responseData = res\n      }\n      responseData.on('error', listeners.error)\n      if (statusCode >= 300) {\n        let body = ''\n        responseData.on('data', s => {\n          body += s.toString()\n          if (body.length > 1000) {\n            body = body.slice(0, 1000)\n            res.resume()\n          }\n        })\n        responseData.on('end', () => {\n          if (body === '' && !!res.headers['x-influxdb-error']) {\n            body = res.headers['x-influxdb-error'].toString()\n          }\n          listeners.error(\n            new HttpError(\n              statusCode,\n              res.statusMessage,\n              body,\n              res.headers['retry-after']\n            )\n          )\n        })\n      } else {\n        responseData.on('data', data => {\n          if (cancellable.isCancelled()) {\n            res.resume()\n          } else {\n            listeners.next(data)\n          }\n        })\n        responseData.on('end', listeners.complete)\n      }\n    })\n    // Support older Nodes which don't allow .timeout() in the\n    // request options\n    /* istanbul ignore else support older node versions */\n    if (typeof req.setTimeout === 'function') {\n      req.setTimeout(requestMessage.timeout)\n    }\n\n    req.on('timeout', () => {\n      listeners.error(new RequestTimedOutError())\n    })\n    req.on('error', error => {\n      listeners.error(error)\n    })\n    req.on('close', listeners.complete)\n\n    /* istanbul ignore else support older node versions */\n    if (requestMessage.body) {\n      req.write(requestMessage.body)\n    }\n    req.end()\n  }\n}\nexport default NodeHttpTransport\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options - query options to use\n   * @returns this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","canRetryHttpCall","error","canRetry","code","getRetryDelay","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","config","wrap","patterns","keys","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","matched","toEscape","escapeChar","toReplace","replaceChar","slice","index","undefined","length","EscaperConfig","escaperConfig","bindEsc","e","escape","bind","measurement",","," ","\n","\r","\t","quoted","\"","\\\\","tag","=","useHrTime","useProcessHrtime","use","process","hrtime","startHrMillis","startHrTime","lastMillis","Date","now","stepsInMillis","nanos","hrTime","millis","floor","String","substr","micros","trunc","seconds","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","value","toString","prepareRetVal","substring","c","charAt","fluxString","fluxInteger","sanitizeFloat","dot","fluxFloat","fluxDateTime","sanitizeDateTime","fluxDuration","sanitizeRegExp","fluxRegExp","fluxBool","fluxExpression","toFluxValue","toISOString","Array","isArray","map","flux","strings","parts","partIndex","text","sanitized","endsWith","startsWith","symbolObservable","observable","Point","measurementName","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","defaultTags","convertTime","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","RetryStrategyImpl","options","success","failedAttempts","delay","currentDelay","min","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","useDefaultTags","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","add","records","point","points","writePoint","withRetryBuffer","finally","remaining","close","key","nodeChunkCombiner","concat","second","Buffer","toUtf8String","chunk","start","end","allocUnsafe","copy","zlibOptions","zlib","Z_SYNC_FLUSH","finishFlush","emptyBuffer","CancellableImpl","cancelled","NodeHttpTransport","connectionOptions","url","parse","defaultOptions","transportOptions","port","protocol","hostname","requestApi","http.request","https.request","path","callbacks","createRequestMessage","cancellable","useCancellable","_request","contentType","buffer","data","complete","bodyBuffer","from","User-Agent","token","authorization","requestMessage","listeners","state","responseStarted","completeCommunicationObserver","isCancelled","req","res","resume","on","responseData","createGunzip","pipe","write","defaultRowMapping","tableMeta","toObject","ChunksToLines","target","chunks","finished","bufferReceived","previous","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","push","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","QuerySubscription","observer","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","InfluxDB","_options","TransportImpl"],"mappings":"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"}